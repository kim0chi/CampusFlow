// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentEnrollmentSystem.Data;

#nullable disable

namespace StudentEnrollmentSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251017054137_AddEnrollmentDeadlinesAndQuarterPayments")]
    partial class AddEnrollmentDeadlinesAndQuarterPayments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCurrentYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Year")
                        .IsUnique();

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ApprovedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Barangay")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmergencyContactRelationship")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("GPA")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsProfileCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Major")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Minor")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Municipality")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("YearOfStudy")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.ApprovalStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApproverId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnrollmentBatchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StepType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("EnrollmentBatchId", "StepType")
                        .IsUnique();

                    b.ToTable("ApprovalSteps");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("EnrolledCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MinimumYearLevel")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseCode")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.CoursePrerequisite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrerequisiteCourseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PrerequisiteCourseId");

                    b.HasIndex("CourseId", "PrerequisiteCourseId")
                        .IsUnique();

                    b.ToTable("CoursePrerequisites");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnrollmentBatchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Grade")
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<string>("GradedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("GradedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentComments")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("EnrollmentBatchId");

                    b.HasIndex("GradedById");

                    b.HasIndex("StudentId", "CourseId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.EnrollmentBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentComments")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalCredits")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StudentId", "Semester", "AcademicYear", "SubmittedDate");

                    b.ToTable("EnrollmentBatches");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.EnrollmentPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnrollmentBatchId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MeetsRequirement")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PaymentPercentage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PromissoryNoteId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("StudentBalance")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UsingPromissoryNote")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentBatchId")
                        .IsUnique();

                    b.HasIndex("PaymentId");

                    b.HasIndex("PromissoryNoteId");

                    b.ToTable("EnrollmentPayments");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.EnrollmentPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Semester", "AcademicYear", "IsActive");

                    b.ToTable("EnrollmentPeriods");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Fee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("FeeType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IssuedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("StudentAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IssuedById");

                    b.HasIndex("StudentAccountId");

                    b.HasIndex("StudentId");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProcessedByCashierId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("StudentAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedByCashierId");

                    b.HasIndex("ReferenceNumber")
                        .IsUnique();

                    b.HasIndex("StudentAccountId");

                    b.HasIndex("StudentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalCreditsRequired")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.ProgramCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SemesterRecommended")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("YearRecommended")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ProgramId", "CourseId")
                        .IsUnique();

                    b.ToTable("ProgramCourses");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.PromissoryNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AmountCovered")
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectorComments")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("EnrollmentBatchId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QuarterPaymentRequirementId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RepaymentDeadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewedByCampusDirectorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EnrollmentBatchId");

                    b.HasIndex("ReviewedByCampusDirectorId");

                    b.HasIndex("StudentId");

                    b.ToTable("PromissoryNotes");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.QuarterPaymentRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ActualPaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasPromissoryNote")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MeetsRequirement")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PromissoryNoteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuarterPeriodId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("RequiredPaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalBalanceAtQuarterStart")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PromissoryNoteId")
                        .IsUnique();

                    b.HasIndex("QuarterPeriodId");

                    b.HasIndex("StudentId", "QuarterPeriodId")
                        .IsUnique();

                    b.ToTable("QuarterPaymentRequirements");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.QuarterPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PaymentDeadline")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quarter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Quarter", "Semester", "AcademicYear")
                        .IsUnique();

                    b.ToTable("QuarterPeriods");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.StudentAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcademicYear")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalBilled")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StudentId", "Semester", "AcademicYear")
                        .IsUnique();

                    b.ToTable("StudentAccounts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.ApplicationUser", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudentEnrollmentSystem.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApprovedBy");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.ApprovalStep", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "Approver")
                        .WithMany("ApprovalActions")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudentEnrollmentSystem.Models.EnrollmentBatch", "EnrollmentBatch")
                        .WithMany("ApprovalSteps")
                        .HasForeignKey("EnrollmentBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("EnrollmentBatch");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.CoursePrerequisite", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.Course", "Course")
                        .WithMany("PrerequisiteRelations")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentSystem.Models.Course", "PrerequisiteCourse")
                        .WithMany("DependentCourseRelations")
                        .HasForeignKey("PrerequisiteCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("PrerequisiteCourse");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Enrollment", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentSystem.Models.EnrollmentBatch", "EnrollmentBatch")
                        .WithMany("Enrollments")
                        .HasForeignKey("EnrollmentBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "GradedBy")
                        .WithMany()
                        .HasForeignKey("GradedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("EnrollmentBatch");

                    b.Navigation("GradedBy");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.EnrollmentBatch", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.EnrollmentPayment", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.EnrollmentBatch", "EnrollmentBatch")
                        .WithOne("EnrollmentPayment")
                        .HasForeignKey("StudentEnrollmentSystem.Models.EnrollmentPayment", "EnrollmentBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentSystem.Models.Payment", "Payment")
                        .WithMany("EnrollmentPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudentEnrollmentSystem.Models.PromissoryNote", "PromissoryNote")
                        .WithMany()
                        .HasForeignKey("PromissoryNoteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EnrollmentBatch");

                    b.Navigation("Payment");

                    b.Navigation("PromissoryNote");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.EnrollmentPeriod", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Fee", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudentEnrollmentSystem.Models.StudentAccount", "StudentAccount")
                        .WithMany("Fees")
                        .HasForeignKey("StudentAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssuedBy");

                    b.Navigation("Student");

                    b.Navigation("StudentAccount");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Payment", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "ProcessedByCashier")
                        .WithMany()
                        .HasForeignKey("ProcessedByCashierId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudentEnrollmentSystem.Models.StudentAccount", "StudentAccount")
                        .WithMany("Payments")
                        .HasForeignKey("StudentAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessedByCashier");

                    b.Navigation("Student");

                    b.Navigation("StudentAccount");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Program", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.ProgramCourse", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentSystem.Models.Program", "Program")
                        .WithMany("ProgramCourses")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.PromissoryNote", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.EnrollmentBatch", "EnrollmentBatch")
                        .WithMany()
                        .HasForeignKey("EnrollmentBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "ReviewedByCampusDirector")
                        .WithMany()
                        .HasForeignKey("ReviewedByCampusDirectorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EnrollmentBatch");

                    b.Navigation("ReviewedByCampusDirector");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.QuarterPaymentRequirement", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.PromissoryNote", "PromissoryNote")
                        .WithOne("QuarterPaymentRequirement")
                        .HasForeignKey("StudentEnrollmentSystem.Models.QuarterPaymentRequirement", "PromissoryNoteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("StudentEnrollmentSystem.Models.QuarterPeriod", "QuarterPeriod")
                        .WithMany("PaymentRequirements")
                        .HasForeignKey("QuarterPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromissoryNote");

                    b.Navigation("QuarterPeriod");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.QuarterPeriod", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.StudentAccount", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApprovalActions");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Course", b =>
                {
                    b.Navigation("DependentCourseRelations");

                    b.Navigation("Enrollments");

                    b.Navigation("PrerequisiteRelations");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Department", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.EnrollmentBatch", b =>
                {
                    b.Navigation("ApprovalSteps");

                    b.Navigation("EnrollmentPayment");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Payment", b =>
                {
                    b.Navigation("EnrollmentPayments");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Program", b =>
                {
                    b.Navigation("ProgramCourses");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.PromissoryNote", b =>
                {
                    b.Navigation("QuarterPaymentRequirement");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.QuarterPeriod", b =>
                {
                    b.Navigation("PaymentRequirements");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.StudentAccount", b =>
                {
                    b.Navigation("Fees");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
